import disnake
from disnake.ext import commands
import platform
import psutil
import pytz
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import io
import numpy as np
import matplotlib.patches as mpatches
import requests
from disnake import Embed
import asyncio
from disnake.ext import commands, tasks


moscow_tz = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ 3 —á–∞—Å–∞
    return datetime.now(moscow_tz) + timedelta(hours=3)

def system_info():
    uname = platform.uname()
    sys_info = f"–°–∏—Å—Ç–µ–º–∞: {uname.system}\n–ò–º—è —É–∑–ª–∞: {uname.node}\n–í–µ—Ä—Å–∏—è: {uname.version}\n–ú–∞—à–∏–Ω–∞: {uname.machine}\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {uname.processor}"
    return sys_info, psutil.cpu_count(logical=True)

def round_to_thousands_gb(value):
    return round(value / 1024)

class Stats2(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.send_stats.start()

    @tasks.loop(seconds=10)
    async def send_stats(self): # –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ async
        messagebox = self.bot.get_channel(1193307736788709386)  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞

        cpu_patch = mpatches.Patch(color='orange', label='CPU')
        memory_patch = mpatches.Patch(color='skyblue', label='Memory')

        # IP-–∞–¥—Ä–µ—Å Flask —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∑–∞–ø—É—â–µ–Ω
        flask_server_ip = 'http://141.147.61.232:25567'  # –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞, –∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π

        response = requests.get(f"{flask_server_ip}/stats")

        if response.status_code == 200:
            data = response.json()
            cpu_usage = np.array(data['cpu_usage_history'])
            mem_usage = np.array(data['memory_usage_history'])
            mem_usage = mem_usage / 1024  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ú–ë
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞")

        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –û–ó–£ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∫–∞–ª—É —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∞—Å–æ–º
        min_mem_usage = np.min(mem_usage)
        max_mem_usage = np.max(mem_usage)
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º—É–º –Ω–∞ —à–∫–∞–ª–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª –Ω–∞ 10% –±–æ–ª—å—à–µ
        mem_scale_min = np.floor(min_mem_usage)
        mem_scale_max = np.ceil(max_mem_usage * 1.1)  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ + 10%

        fig, (ax_cpu, ax_mem) = plt.subplots(2, 1, figsize=(10, 8))

        ax_cpu.plot(cpu_usage, label='CPU Usage', color='orange', linewidth=2)
        ax_cpu.fill_between(range(len(cpu_usage)), cpu_usage, color='orange', alpha=0.1)
        ax_cpu.set_ylim(0, 100)
        ax_cpu.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç(%)', color='orange', fontsize=14)
        ax_cpu.tick_params(axis='y', colors='orange', which='both', length=0)
        ax_cpu.legend(handles=[cpu_patch])
        ax_cpu.grid(False)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Memory
        ax_mem.plot(mem_usage, label='Memory Usage', color='skyblue', linewidth=2)
        ax_mem.fill_between(range(len(mem_usage)), mem_usage, color='skyblue', alpha=0.1)
        ax_mem.set_ylim(mem_scale_min, mem_scale_max)  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã –æ—Å–∏ Y
        ax_mem.set_yticks(np.arange(mem_scale_min, mem_scale_max + 0.5, 0.5))  # –®–∞–≥ —Å–µ—Ç–∫–∏ 500 –ú–ë
        ax_mem.set_ylabel('–ì–∏–≥–∞–±–∞–π—Ç(GB)', color='orange', fontsize=14)
        ax_mem.tick_params(axis='y', colors='orange', which='both', length=0)
        ax_mem.legend(handles=[memory_patch])
        ax_mem.grid(False)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –¥–µ–ª–µ–Ω–∏–π
        plt.rc('ytick', labelsize=14)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        ax_cpu.set_facecolor('#353535')
        ax_mem.set_facecolor('#353535')
        fig.patch.set_facecolor('#353535')

        plt.tight_layout(pad=3.0)
        plt.savefig('d2_usage.png', facecolor=fig.get_facecolor(), edgecolor='none')
        plt.close()
        
        title = "D2"
        embed = Embed(title=title)
        response = requests.get('http://141.147.61.232:25567/stats')
        node_stats = response.json()
    
        if not node_stats.get('system_hard_data'):
            embed.description = "Offline üì¥"
            embed.colour = disnake.Colour.red()
            return embed

        is_online = node_stats.get('is_online', True)
        if is_online:
            system_hard_data = node_stats['system_hard_data']
            system_data = node_stats['system_data']
        
            cpu_name = system_hard_data['cpuName']
            os_name = system_hard_data['os']

            embed.description = f"{os_name}\n\n{cpu_name}"
            embed.colour = disnake.Colour.green()
        
            memory_usage_latest = system_data.get('memory', 0) / 1024
            disk_usage_latest = system_data.get('disk', 0) / 1024
            cpu_usage_latest = system_data.get('cpu', 0)

            embed.add_field(name="CPU Cores", value=str(system_hard_data['cpu']), inline=True)
            embed.add_field(name="CPU Usage", value=f"{round(cpu_usage_latest)}%", inline=True)
            embed.add_field(name="Memory", value=f"{memory_usage_latest:.2f}/{round_to_thousands_gb(system_hard_data['memory'])} GB", inline=True)
            embed.add_field(name="Disk", value=f"{disk_usage_latest:.2f}/{round_to_thousands_gb(system_hard_data['disk'])} GB", inline=True)
        
            embed.set_thumbnail(url="https://static.linux123123.com/online.png")
            embed.set_image(file=disnake.File("/home/container/d2_usage.png"))
        else:
            embed.description = "Node is offline üò¥"
            embed.colour = disnake.Colour.greyple()

        try:
            if self.last_message is not None:
                await self.last_message.edit(embed=embed)
            else:
                self.last_message = await messagebox.send(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
  
    @send_stats.before_loop
    async def before_send_stats(self):
        await self.bot.wait_until_ready()
        self.last_message = None
            
            

def setup(bot):
    bot.add_cog(Stats2(bot))
    print("[D2] –≥–æ—Ç–æ–≤")